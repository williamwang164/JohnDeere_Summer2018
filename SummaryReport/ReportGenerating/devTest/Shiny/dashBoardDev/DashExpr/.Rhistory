knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
#Harvest Performance Scores (AKA HPS)
#  overall performance, grain productivity, power utalization, fuel Economy, grain
#  saving
hpsTable <-
createHPS(bindedDF)
#Harvesting Performance - Engineering Units (AKA HPEU)
# Grain Prod, Power Util, Fuel Econ, Total Loss
hpeuTable <-
createHPEU(bindedDF)
#Power Summary (AKA PS)
# Engine Harv, Eng Harv and UL, Avg Harv Specific Pwr, Propulsion Power
psTable <-
createPS(bindedDF)
engineHarvesting <- bindedDF %>%
dplyr::filter(ms == 5) %>%
dplyr::group_by(serialnumber, Source) %>%
dplyr::summarise(EngineHarv = mean(ep, na.rm = TRUE))
psTable$EngineHarv <- engineHarvesting$EngineHarv
# agronomic and output summary (AKA AOS)
# Avg Harvest Speed, Harv Area, Avg Yield
aosTable <-
createAOS(bindedDF)
############################################
#       Rename the tables                  #
#   Rename row names to source             #
#   Rename the col names to proper titles  #
############################################
names(hpsTable) <- c("Machine", "Source", "Overall Performance", "Grain Productivity", "Power Utilization", "Fuel Economy", "Grain Saving")
hpsTable
names(hpsTable) <- c("Machine",  "Overall Performance", "Grain Productivity", "Power Utilization", "Fuel Economy", "Grain Saving")
names(hpeuTable) <- c("Machine", "Grain Prod (t/h)", "Power Utl (%)", "Fuel Econ (1/t)")
names(psTable) <- c("Machine", "Engine Harv (kW)", "Eng Harv & Utl (kW)", "Avg Harv Specific Pwr (kW/t/h)", "Propulsion Power (kW)")
names(aosTable) <- c("Machine", "Avg Harvest Speed (km/h)", "Harv Area (ha)", "Avg Yield (t/ha)")
machines <- unique(bindedDF$serialnumber)
output <- kable(round(hpsTable, digits = 0), "latex", booktabs = TRUE)
machines <- unique(bindedDF$serialnumber)
output <- kable(hpsTable, "latex", booktabs = TRUE)
rnum <- 1
for(i in seq_along(machines)){
output <- output %>%
group_rows(machines[i], rnum, rnum + 1, latex_gap_space = "2em")
rnum <- rnum + 2
}
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
machines <- unique(bindedDF$serialnumber)
output <- kable(hpsTable, "latex", booktabs = TRUE)
rnum <- 1
for(i in seq_along(machines)){
output <- output %>%
group_rows(machines[i], rnum, rnum + 1, latex_gap_space = "2em")
rnum <- rnum + 2
}
output
output <- kable(hpeuTable, digits = 1,"latex", booktabs = TRUE)
rnum <- 1
for(i in seq_along(machines)){
output <- output %>%
group_rows(machines[i], rnum, rnum + 1, latex_gap_space = "2em")
rnum <- rnum + 2
}
output
bindedDF$sourceserialnumber
# Prepare separate dfs for plots
simDf <- bindedDF %>% dplyr::filter(Source == "Simulated")
harvDF <- bindedDF %>% dplyr::filter(Source == "As Harvested")
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
minX <- with(bindedDF, min(lon, na.rm = TRUE))
maxX <- with(bindedDF, max(lon, na.rm = TRUE))
minY <- with(bindedDF, min(lat, na.rm = TRUE))
maxY <- with(bindedDF, max(lat, na.rm = TRUE))
minX <- round(minX, 4) - 0.0001
maxX <- round(maxX, 4) + 0.0001
minY <- round(minY, 4) - 0.0001
maxY <- round(maxY, 4) + 0.0001
# Calculate Zoom
bindedDFZoom <- calc_zoom(lon, lat, bindedDF) - 1
# Calculate Center of path
bindedDFlon <- (max(bindedDF$lon) + min(bindedDF$lon))/2
bindedDFlat <- (max(bindedDF$lat) + min(bindedDF$lat))/2
# Get The Maps
map <-
get_map(location = c(lon = bindedDFlon, lat = bindedDFlat),
zoom = bindedDFZoom, maptype = "satellite")
bindedDFscale <-
data.frame(lat = c(min(bindedDF$lat), max(bindedDF$lat)),
lon = c(min(bindedDF$lon), max(bindedDF$lon)))
# Prepare separate dfs for plots
simDf <- bindedDF %>% dplyr::filter(Source == "Simulated")
harvDF <- bindedDF %>% dplyr::filter(Source == "As Harvested")
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
rightPlot <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~ serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
plotDensity <- ggplot(data = bindedDF) +
geom_density(aes(x = gpssp, color = serialnumber), size = 1.5) +
scale_x_continuous(limits = densLim, expand = c(0, 0))+
densTheme() +
labs(x = "Ground Speed, kph") +
geom_hline(yintercept = 0, size = 2, colour = "gray")
grid.arrange(plotAsHarvest,
rightPlot,
plotDensity,
layout_matrix = rbind(c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(3,3,3,3,3,3),
c(3,3,3,3,3,3)))
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
rightPlot <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~ serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
plotDensity <- ggplot(data = harvDF) +
geom_density(aes(x = gpssp, color = serialnumber), size = 1.5) +
scale_x_continuous(limits = densLim, expand = c(0, 0))+
densTheme() +
labs(x = "Ground Speed, kph") +
geom_hline(yintercept = 0, size = 2, colour = "gray")
grid.arrange(plotAsHarvest,
rightPlot,
plotDensity,
layout_matrix = rbind(c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(3,3,3,3,3,3),
c(3,3,3,3,3,3)))
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
rightPlot <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
plotDensity <- ggplot(data = harvDF) +
geom_density(aes(x = gpssp, color = serialnumber), size = 1.5) +
scale_x_continuous(limits = densLim, expand = c(0, 0))+
densTheme() +
labs(x = "Ground Speed, kph") +
geom_hline(yintercept = 0, size = 2, colour = "gray")
grid.arrange(plotAsHarvest,
rightPlot,
plotDensity,
layout_matrix = rbind(c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(1,1,1,2,2,2),
c(3,3,3,3,3,3),
c(3,3,3,3,3,3)))
rightPlot <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
rightPlot
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
rightPlot <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
rightPlot
ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
# Prepare separate dfs for plots
simDf <- bindedDF %>% dplyr::filter(Source == "Simulated")
harvDF <- bindedDF %>% dplyr::filter(Source == "As Harvested")
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
densLim <- densLimit(harvDF, "gpssp", params$dpc)
rightPlot
# minZ   <- with(bindedDF, quantile(gpssp, 1 - params$pc, na.rm = TRUE))
# maxZ   <- with(bindedDF, quantile(gpssp, params$pc, na.rm = TRUE))
#
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp < minZ, minZ, gpssp))
# bindedDF$gpssp2 <- with(bindedDF, ifelse(gpssp2 > maxZ, maxZ, gpssp2))
mapDF <- limitVar(harvDF, "gpssp", params$pc)
plotAsHarvest <- ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_colour_gradientn(
limits = c(mapDF$minZ[1]-1, mapDF$maxZ[1]+1),
colours = matlab.like(64),
guide = guide_colorbar(barwidth = unit(0.45, "npc"))
) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
mapTheme()
ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
ggmap(map) +
geom_point(data = mapDF, aes(x = lon, y = lat, colour = var2)) +
scale_x_continuous(limits = c(minX, maxX), expand = c(0, 0)) +
scale_y_continuous(limits = c(minY, maxY), expand = c(0, 0)) +
facet_wrap(~serialnumber, ncol = 1) +
rightTheme()
knitr::opts_chunk$set(comment=NA, echo=FALSE, warning=FALSE, message=FALSE)
library(tidyverse)
library(dbplyr)
library(tinytex)
library(colorRamps)
library(knitr)
library(kableExtra)
library(gridExtra)
library(grid)
library(ggplot2)
library(ggmap)
library(ggpubr)
library(scales)
library(data.table)
source("src/versatility.R")
source("src/plotUtil.R")
source("src/tableUtil.R")
# Read in files
setwd(params$path)
asHarvest        <- read.csv(params$file1, header = TRUE, as.is = TRUE)
asHarvest        <- rbind(asHarvest, read.csv(params$file2, header = TRUE, as.is = TRUE))
asHarvest        <- rbind(asHarvest, read.csv(params$file3, header = TRUE, as.is = TRUE))
simulatedHarvest <- read.csv(params$file4, header = FALSE, as.is = TRUE)
simulatedHarvest <- rbind(simulatedHarvest, read.csv(params$file5, header = FALSE, as.is = TRUE))
simulatedHarvest <- rbind(simulatedHarvest, read.csv(params$file6, header = FALSE, as.is = TRUE))
headerNames      <- read.csv(params$file7, header = TRUE)
names(simulatedHarvest) <- headerNames$AWS
asHarvest        <- mutate(asHarvest, Source = "As Harvested")
simulatedHarvest <- mutate(simulatedHarvest, Source = "Simulated")
asHarvest[["time"]] <- NULL
asHarvest[["Index"]] <- NULL
# tidy the data before merging
asHarvest$hwu <- with(asHarvest, ifelse(is.na(hwu), hwi, hwu))
bindedDF  <- rbind(asHarvest, simulatedHarvest)
#######################################
#########Preparing Calculations########
#######################################
model <- bindedDF$serialnumber %>% unique(.) %>% substr(., 4, 7) %>% unique(.)
maxPower <- case_when(
model == "S660" ~ 249,
model == "S670" ~ 292,
model == "S680" ~ 353,
model == "S685" ~ 373,
model == "S690" ~ 405,
TRUE ~ as.numeric(NA)
)
bindedDF <- bindedDF %>%
mutate(., pu = ep/373 * 100)
#Harvest Performance Scores (AKA HPS)
#  overall performance, grain productivity, power utalization, fuel Economy, grain
#  saving
hpsTable <-
createHPS(bindedDF)
#Harvesting Performance - Engineering Units (AKA HPEU)
# Grain Prod, Power Util, Fuel Econ, Total Loss
hpeuTable <-
createHPEU(bindedDF)
#Power Summary (AKA PS)
# Engine Harv, Eng Harv and UL, Avg Harv Specific Pwr, Propulsion Power
psTable <-
createPS(bindedDF)
engineHarvesting <- bindedDF %>%
dplyr::filter(ms == 5) %>%
dplyr::group_by(serialnumber, Source) %>%
dplyr::summarise(EngineHarv = mean(ep, na.rm = TRUE))
psTable$EngineHarv <- engineHarvesting$EngineHarv
# agronomic and output summary (AKA AOS)
# Avg Harvest Speed, Harv Area, Avg Yield
aosTable <-
createAOS(bindedDF)
# Rename col names
names(hpsTable) <- c("Machine",  "Overall Performance", "Grain Productivity", "Power Utilization", "Fuel Economy", "Grain Saving")
names(hpeuTable) <- c("Machine", "Grain Prod (t/h)", "Power Utl (%)", "Fuel Econ (1/t)")
names(psTable) <- c("Machine", "Engine Harv (kW)", "Eng Harv & Utl (kW)", "Avg Harv Specific Pwr (kW/t/h)", "Propulsion Power (kW)")
names(aosTable) <- c("Machine", "Avg Harvest Speed (km/h)", "Harv Area (ha)", "Avg Yield (t/ha)")
machines <- unique(bindedDF$serialnumber)
output <- kable(hpsTable, digits = 0,"latex", booktabs = TRUE)
rnum <- 1
for(i in seq_along(machines)){
output <- output %>%
group_rows(machines[i], rnum, rnum + 1)
rnum <- rnum + 2
}
output
shiny::runApp('GitHub/SummaryReport/devTest/Shiny/SummaryReport')
runApp('GitHub/SummaryReport/devTest/Shiny/SummaryReport')
runApp('GitHub/SummaryReport/devTest/Shiny/SummaryReport')
shiny::runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
tempdir()
getwd()
./
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
runApp('GitHub/SummaryReport/devTest/Shiny')
shiny::runApp('GitHub/SummaryReport/devTest/Shiny/dashBoardDev/DashExpr')
runApp('GitHub/SummaryReport/devTest/Shiny/dashBoardDev/DashExpr')
runApp('GitHub/SummaryReport/devTest/Shiny/dashBoardDev/DashExpr')
